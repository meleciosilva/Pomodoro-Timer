{"ast":null,"code":"var _jsxFileName = \"/Users/Melecio/thinkful/qualified-challenges/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js\";\nimport React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport FocusDuration from \"./FocusDuration\";\nimport BreakDuration from \"./BreakDuration\";\nimport PlayPauseStopButtons from \"./PlayPauseButtons\";\nimport ProgressBar from \"./ProgressBar\";\nimport Paused from \"./Paused\";\nimport FocusOrBreak from \"./FocusOrBreak\";\n\nfunction Pomodoro() {\n  // Starts with session awaiting start\n  const [session, setSession] = useState(false); // Timer starts out paused\n\n  const [isTimerRunning, setIsTimerRunning] = useState(false); // Focus time starts at 25 minutes\n\n  const [focusTime, setFocusTime] = useState(.2); // Break time starts at 5 minutes\n\n  const [breakTime, setBreakTime] = useState(5); // Pomodoro play time starts at 25 minutes (1500 seconds)\n\n  const [playTime, setPlayTime] = useState(1500); // Starts Pomodoro timer on focus mode\n\n  const [isFocused, setIsFocused] = useState(true); // adds 5 minutes of focusTime & playTime up to 60 minutes\n\n  function addFocus() {\n    setFocusTime(prevTime => prevTime < 60 ? prevTime + 5 : prevTime);\n    setPlayTime(prevTime => prevTime < 3600 ? prevTime + 300 : prevTime);\n  } // reduces 5 minutes of focusTime & playTime down to 5 minutes\n\n\n  function reduceFocus() {\n    setFocusTime(prevTime => prevTime > 5 ? prevTime - 5 : prevTime);\n    setPlayTime(prevTime => prevTime > 300 ? prevTime - 300 : prevTime);\n  } // adds 1 minute to break time up to 15 minutes\n\n\n  function addBreak() {\n    setBreakTime(prevTime => prevTime < 15 ? prevTime + 1 : prevTime);\n  } // reduces 1 minute of break time down to 1 minute\n\n\n  function reduceBreak() {\n    setBreakTime(prevTime => prevTime > 1 ? prevTime - 1 : prevTime);\n  } // sets timer on or off when play/pause button is pressed and starts session (displays countdown)\n\n\n  function playPause() {\n    setSession(true);\n    setIsTimerRunning(prevState => !prevState);\n  } // stops the session and timer, resets playTime to last selected focusTime, and resets to focus mode for next start\n\n\n  function stopSession() {\n    setSession(false);\n    setIsTimerRunning(false);\n    setIsFocused(true);\n    setPlayTime(focusTime * 60);\n  } // Decrements pomodoro time by 1 second when the timer is running\n\n\n  function decrementTime() {\n    if (playTime >= 1) setPlayTime(prevState => prevState - 1);\n  } // switches between focus and break mode when time runs out and plays bell\n\n\n  function switchModes() {\n    if (playTime < 1) {\n      setPlayTime(isFocused ? breakTime * 60 : focusTime * 60);\n      setIsFocused(current => !current);\n      new Audio(`https://bigsoundbank.com/UPLOAD/mp3/1482.mp3`).play();\n    }\n  } // Set intial state of progress bar to 0%\n\n\n  const [progress, setProgress] = useState(0); // increases progress bar completion proportionally based on selected focus or break time\n\n  function increaseProgress() {\n    if (playTime < 1) return setProgress(0);\n    if (isFocused) return setProgress(prevState => prevState + 1 / (focusTime * 60) * 100);\n    if (!isFocused) return setProgress(prevState => prevState + 1 / (breakTime * 60) * 100);\n  } // Invokes decrementTime, switchModes, and increaseProgress functions every 1000ms (1 sec) when the timer is running\n\n\n  useInterval(() => {\n    decrementTime();\n    switchModes();\n    increaseProgress();\n  }, isTimerRunning ? 1000 : null); // displays focusing/on break statement, time remaining, and progress bar when in session\n\n  const displaySession = () => {\n    if (session) {\n      return {\n        display: 'block'\n      };\n    } else {\n      return {\n        display: 'none'\n      };\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pomodoro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FocusDuration, {\n    focusTime: focusTime,\n    handleAdd: addFocus,\n    handleReduce: reduceFocus,\n    inSession: session,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(BreakDuration, {\n    breakTime: breakTime,\n    handleAdd: addBreak,\n    handleReduce: reduceBreak,\n    inSession: session,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(PlayPauseStopButtons, {\n    isTimerRunning: isTimerRunning,\n    inSession: session,\n    handlePlayPause: playPause,\n    handleStop: stopSession,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    style: displaySession(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FocusOrBreak, {\n    focusTime: focusTime,\n    breakTime: breakTime,\n    isFocused: isFocused,\n    playTime: playTime,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Paused, {\n    isTimerRunning: isTimerRunning,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(ProgressBar, {\n    progress: progress,\n    focusTime: focusTime,\n    breakTime: breakTime,\n    isFocused: isFocused,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }\n  })));\n}\n\nexport default Pomodoro;","map":{"version":3,"sources":["/Users/Melecio/thinkful/qualified-challenges/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js"],"names":["React","useState","useInterval","FocusDuration","BreakDuration","PlayPauseStopButtons","ProgressBar","Paused","FocusOrBreak","Pomodoro","session","setSession","isTimerRunning","setIsTimerRunning","focusTime","setFocusTime","breakTime","setBreakTime","playTime","setPlayTime","isFocused","setIsFocused","addFocus","prevTime","reduceFocus","addBreak","reduceBreak","playPause","prevState","stopSession","decrementTime","switchModes","current","Audio","play","progress","setProgress","increaseProgress","displaySession","display"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport FocusDuration from \"./FocusDuration\";\nimport BreakDuration from \"./BreakDuration\";\nimport PlayPauseStopButtons from \"./PlayPauseButtons\";\nimport ProgressBar from \"./ProgressBar\";\nimport Paused from \"./Paused\";\nimport FocusOrBreak from \"./FocusOrBreak\";\n\nfunction Pomodoro() {\n  // Starts with session awaiting start\n  const [session, setSession] = useState(false);\n  \n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  \n  // Focus time starts at 25 minutes\n  const [focusTime, setFocusTime] = useState(.2);\n\n  // Break time starts at 5 minutes\n  const [breakTime, setBreakTime] = useState(5);\n\n  // Pomodoro play time starts at 25 minutes (1500 seconds)\n  const [playTime, setPlayTime] = useState(1500);\n\n  // Starts Pomodoro timer on focus mode\n  const [isFocused, setIsFocused] = useState(true);\n\n  // adds 5 minutes of focusTime & playTime up to 60 minutes\n  function addFocus() {\n    setFocusTime(prevTime => prevTime < 60 ? prevTime + 5 : prevTime);\n    setPlayTime(prevTime => prevTime < 3600 ? prevTime + 300 : prevTime);\n  }\n  \n  // reduces 5 minutes of focusTime & playTime down to 5 minutes\n  function reduceFocus() {\n    setFocusTime(prevTime => prevTime > 5 ? prevTime - 5 : prevTime);\n    setPlayTime(prevTime => prevTime > 300 ? prevTime - 300 : prevTime);\n  }\n\n  // adds 1 minute to break time up to 15 minutes\n  function addBreak() {\n    setBreakTime(prevTime => prevTime < 15 ? prevTime + 1 : prevTime);\n  }\n  \n  // reduces 1 minute of break time down to 1 minute\n  function reduceBreak() {\n    setBreakTime(prevTime => prevTime > 1 ? prevTime - 1 : prevTime);\n  }\n\n  // sets timer on or off when play/pause button is pressed and starts session (displays countdown)\n  function playPause() {\n    setSession(true);\n    setIsTimerRunning((prevState) => !prevState);\n  }\n\n  // stops the session and timer, resets playTime to last selected focusTime, and resets to focus mode for next start\n  function stopSession() {\n    setSession(false);\n    setIsTimerRunning(false);\n    setIsFocused(true);\n    setPlayTime(focusTime * 60);\n  }\n\n  // Decrements pomodoro time by 1 second when the timer is running\n  function decrementTime() {\n    if (playTime >= 1) setPlayTime(prevState => prevState - 1);\n  } \n\n  // switches between focus and break mode when time runs out and plays bell\n  function switchModes() {\n    if (playTime < 1) {\n      setPlayTime(isFocused ? breakTime * 60 : focusTime * 60);\n      setIsFocused((current) => !current);\n      new Audio(`https://bigsoundbank.com/UPLOAD/mp3/1482.mp3`).play();\n    }\n  }\n\n  // Set intial state of progress bar to 0%\n  const [progress, setProgress] = useState(0);\n\n  // increases progress bar completion proportionally based on selected focus or break time\n  function increaseProgress() {\n    if (playTime < 1) return setProgress(0);\n    if (isFocused) return setProgress(prevState => prevState + 1/(focusTime*60) * 100);\n    if (!isFocused) return setProgress(prevState => prevState + 1/(breakTime*60) * 100);\n  }\n\n  // Invokes decrementTime, switchModes, and increaseProgress functions every 1000ms (1 sec) when the timer is running\n  useInterval(\n    () => {\n      decrementTime();\n      switchModes();\n      increaseProgress();\n    },\n    isTimerRunning ? 1000 : null\n  );\n\n  // displays focusing/on break statement, time remaining, and progress bar when in session\n  const displaySession = () => {\n    if (session) {\n      return {display: 'block'}\n    } else {\n      return {display: 'none'}\n    }\n  }\n\n  return (\n    <div className=\"pomodoro\">\n\n      <div className=\"row\">\n        <FocusDuration focusTime={focusTime} handleAdd={addFocus} handleReduce={reduceFocus} inSession={session} />\n        <BreakDuration breakTime={breakTime} handleAdd={addBreak} handleReduce={reduceBreak} inSession={session} />\n      </div>\n\n      <PlayPauseStopButtons isTimerRunning={isTimerRunning} inSession={session} handlePlayPause={playPause} handleStop={stopSession} />\n\n      <div style={displaySession()}>\n        <FocusOrBreak focusTime={focusTime} breakTime={breakTime} isFocused={isFocused} playTime={playTime} />\n        <Paused isTimerRunning={isTimerRunning} />\n        <ProgressBar progress={progress} focusTime={focusTime} breakTime={breakTime} isFocused={isFocused} />\n      </div>\n\n    </div>\n  );\n}\n\nexport default Pomodoro;\n"]},"metadata":{},"sourceType":"module"}