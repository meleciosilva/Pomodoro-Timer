{"ast":null,"code":"var _jsxFileName = \"/Users/Melecio/thinkful/qualified-challenges/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js\";\nimport React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport FocusDuration from \"./FocusDuration\";\nimport BreakDuration from \"./BreakDuration\";\nimport SessionScreen from \"./SessionScreen\";\nimport PlayPauseStopButtons from \"./PlayPauseButtons\";\n\nfunction Pomodoro() {\n  // Starts with session awaiting start\n  const [session, setSession] = useState(false); // Timer starts out paused\n\n  const [isTimerRunning, setIsTimerRunning] = useState(false); // Focus time starts at 25 minutes\n\n  const [focusTime, setFocusTime] = useState(25); // Break time starts at 5 minutes\n\n  const [breakTime, setBreakTime] = useState(5); // Pomodoro play time starts at 25 minutes (1500 seconds)\n\n  const [playTime, setPlayTime] = useState(1500); // Starts Pomodoro timer on focus mode\n\n  const [isFocused, setIsFocused] = useState(true); // Set intial state of progress bar to 0%\n\n  const [progress, setProgress] = useState(0); // adds 5 minutes of focusTime & playTime up to 60 minutes\n\n  function addFocus() {\n    setFocusTime(prevTime => prevTime < 60 ? prevTime + 5 : prevTime);\n    setPlayTime(prevTime => prevTime < 3600 ? prevTime + 300 : prevTime);\n    console.log(focusTime);\n  } // reduces 5 minutes of focusTime & playTime down to 5 minutes\n\n\n  function reduceFocus() {\n    setFocusTime(prevTime => prevTime > 5 ? prevTime - 5 : prevTime);\n    setPlayTime(prevTime => prevTime > 300 ? prevTime - 300 : prevTime);\n  } // adds 1 minute to break time up to 15 minutes\n\n\n  function addBreak() {\n    setBreakTime(prevTime => prevTime < 15 ? prevTime + 1 : prevTime);\n  } // reduces 1 minute of break time down to 1 minute\n\n\n  function reduceBreak() {\n    setBreakTime(prevTime => prevTime > 1 ? prevTime - 1 : prevTime);\n  } // sets timer on or off when play/pause button is pressed and starts session (displays countdown)\n\n\n  function playPause() {\n    setSession(true);\n    setIsTimerRunning(prevState => !prevState);\n  } // stops the session and timer, resets playTime to last selected focusTime, and resets to focus mode for next start\n\n\n  function stopSession() {\n    setSession(false);\n    setIsTimerRunning(false);\n    setIsFocused(true); // resets session to focus mode if stopped during a break\n\n    setPlayTime(focusTime * 60); // resets playTime in seconds\n\n    setProgress(0); // resets progress bar\n  } // --------------------- functions that are invoked every second ------------------------ //\n  // Decrements pomodoro time by 1 second when the timer is running\n\n\n  function decrementTime() {\n    if (playTime >= 1) setPlayTime(prevState => prevState - 1);\n  } // switches between focus and break mode when time runs out and plays bell\n\n\n  function switchModes() {\n    if (playTime < 1) {\n      new Audio(`https://bigsoundbank.com/UPLOAD/mp3/1482.mp3`).play();\n      setPlayTime(isFocused ? breakTime * 60 : focusTime * 60);\n      setIsFocused(current => !current);\n    }\n  } // increases progress bar completion proportionally based on selected focus or break time\n\n\n  function increaseProgress() {\n    if (playTime < 1) return setProgress(0);\n\n    if (isFocused) {\n      setProgress(prevState => prevState + 1 / (focusTime * 60) * 100);\n      console.log(progress);\n    }\n\n    if (!isFocused) {\n      setProgress(prevState => prevState + 1 / (breakTime * 60) * 100);\n      console.log(progress);\n    }\n  } // Invokes decrementTime, switchModes, and increaseProgress functions every 1000ms (1 sec) when the timer is running\n\n\n  useInterval(() => {\n    decrementTime();\n    switchModes();\n    increaseProgress();\n  }, isTimerRunning ? 1000 : null);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pomodoro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FocusDuration, {\n    focusTime: focusTime,\n    handleAdd: addFocus,\n    handleReduce: reduceFocus,\n    inSession: session,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(BreakDuration, {\n    breakTime: breakTime,\n    handleAdd: addBreak,\n    handleReduce: reduceBreak,\n    inSession: session,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(PlayPauseStopButtons, {\n    isTimerRunning: isTimerRunning,\n    inSession: session,\n    handlePlayPause: playPause,\n    handleStop: stopSession,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(SessionScreen, {\n    inSession: session,\n    isTimerRunning: isTimerRunning,\n    progress: progress,\n    focusTime: focusTime,\n    breakTime: breakTime,\n    isFocused: isFocused,\n    playTime: playTime,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default Pomodoro;","map":{"version":3,"sources":["/Users/Melecio/thinkful/qualified-challenges/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js"],"names":["React","useState","useInterval","FocusDuration","BreakDuration","SessionScreen","PlayPauseStopButtons","Pomodoro","session","setSession","isTimerRunning","setIsTimerRunning","focusTime","setFocusTime","breakTime","setBreakTime","playTime","setPlayTime","isFocused","setIsFocused","progress","setProgress","addFocus","prevTime","console","log","reduceFocus","addBreak","reduceBreak","playPause","prevState","stopSession","decrementTime","switchModes","Audio","play","current","increaseProgress"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport FocusDuration from \"./FocusDuration\";\nimport BreakDuration from \"./BreakDuration\";\nimport SessionScreen from \"./SessionScreen\";\nimport PlayPauseStopButtons from \"./PlayPauseButtons\";\n\nfunction Pomodoro() {\n  // Starts with session awaiting start\n  const [session, setSession] = useState(false);\n  \n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  \n  // Focus time starts at 25 minutes\n  const [focusTime, setFocusTime] = useState(25);\n\n  // Break time starts at 5 minutes\n  const [breakTime, setBreakTime] = useState(5);\n\n  // Pomodoro play time starts at 25 minutes (1500 seconds)\n  const [playTime, setPlayTime] = useState(1500);\n\n  // Starts Pomodoro timer on focus mode\n  const [isFocused, setIsFocused] = useState(true);\n\n  // Set intial state of progress bar to 0%\n  const [progress, setProgress] = useState(0);\n\n  // adds 5 minutes of focusTime & playTime up to 60 minutes\n  function addFocus() {\n    setFocusTime(prevTime => prevTime < 60 ? prevTime + 5 : prevTime);\n    setPlayTime(prevTime => prevTime < 3600 ? prevTime + 300 : prevTime);\n    console.log(focusTime)\n  }\n  \n  // reduces 5 minutes of focusTime & playTime down to 5 minutes\n  function reduceFocus() {\n    setFocusTime(prevTime => prevTime > 5 ? prevTime - 5 : prevTime);\n    setPlayTime(prevTime => prevTime > 300 ? prevTime - 300 : prevTime);\n  }\n\n  // adds 1 minute to break time up to 15 minutes\n  function addBreak() {\n    setBreakTime(prevTime => prevTime < 15 ? prevTime + 1 : prevTime);\n  }\n  \n  // reduces 1 minute of break time down to 1 minute\n  function reduceBreak() {\n    setBreakTime(prevTime => prevTime > 1 ? prevTime - 1 : prevTime);\n  }\n\n  // sets timer on or off when play/pause button is pressed and starts session (displays countdown)\n  function playPause() {\n    setSession(true);\n    setIsTimerRunning((prevState) => !prevState);\n  }\n\n  // stops the session and timer, resets playTime to last selected focusTime, and resets to focus mode for next start\n  function stopSession() {\n    setSession(false);\n    setIsTimerRunning(false);\n    setIsFocused(true); // resets session to focus mode if stopped during a break\n    setPlayTime(focusTime * 60); // resets playTime in seconds\n    setProgress(0); // resets progress bar\n  }\n\n  // --------------------- functions that are invoked every second ------------------------ //\n\n  // Decrements pomodoro time by 1 second when the timer is running\n  function decrementTime() {\n    if (playTime >= 1) setPlayTime(prevState => prevState - 1);\n  } \n\n  // switches between focus and break mode when time runs out and plays bell\n  function switchModes() {\n    if (playTime < 1) {\n      new Audio(`https://bigsoundbank.com/UPLOAD/mp3/1482.mp3`).play();\n      setPlayTime(isFocused ? breakTime * 60 : focusTime * 60);\n      setIsFocused((current) => !current);\n    }\n  }\n\n  // increases progress bar completion proportionally based on selected focus or break time\n  function increaseProgress() {\n    if (playTime < 1) return setProgress(0);\n    if (isFocused) {\n      setProgress(prevState => prevState + 1/(focusTime*60) * 100);\n      console.log(progress);\n    }\n    if (!isFocused) {\n      setProgress(prevState => prevState + 1/(breakTime*60) * 100);\n      console.log(progress);\n    }\n  }\n\n  // Invokes decrementTime, switchModes, and increaseProgress functions every 1000ms (1 sec) when the timer is running\n  useInterval(\n    () => {\n      decrementTime();\n      switchModes();\n      increaseProgress();\n    },\n    isTimerRunning ? 1000 : null\n  );\n\n  return (\n    <div className=\"pomodoro\">\n      <div className=\"row\">\n        <FocusDuration focusTime={focusTime} handleAdd={addFocus} handleReduce={reduceFocus} inSession={session} />\n        <BreakDuration breakTime={breakTime} handleAdd={addBreak} handleReduce={reduceBreak} inSession={session} />\n      </div>\n      <PlayPauseStopButtons isTimerRunning={isTimerRunning} inSession={session} handlePlayPause={playPause} handleStop={stopSession} />\n      <SessionScreen inSession={session} isTimerRunning={isTimerRunning} progress={progress} focusTime={focusTime} breakTime={breakTime} isFocused={isFocused} playTime={playTime}/>\n    </div>\n  );\n}\n\nexport default Pomodoro;\n"]},"metadata":{},"sourceType":"module"}